// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-ranking-api/ent/asset"
	"go-ranking-api/ent/song"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Asset is the model entity for the Asset schema.
type Asset struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform asset.Platform `json:"platform,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetQuery when eager-loading is set.
	Edges      AssetEdges `json:"edges"`
	song_asset *int
}

// AssetEdges holds the relations/edges for other nodes in the graph.
type AssetEdges struct {
	// Song holds the value of the song edge.
	Song *Song `json:"song,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SongOrErr returns the Song value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) SongOrErr() (*Song, error) {
	if e.loadedTypes[0] {
		if e.Song == nil {
			// The edge song was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: song.Label}
		}
		return e.Song, nil
	}
	return nil, &NotLoadedError{edge: "song"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Asset) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asset.FieldID:
			values[i] = new(sql.NullInt64)
		case asset.FieldPlatform, asset.FieldPath, asset.FieldHash:
			values[i] = new(sql.NullString)
		case asset.FieldCreatedAt, asset.FieldUpdatedAt, asset.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case asset.ForeignKeys[0]: // song_asset
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Asset", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Asset fields.
func (a *Asset) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asset.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case asset.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				a.Platform = asset.Platform(value.String)
			}
		case asset.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				a.Path = value.String
			}
		case asset.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				a.Hash = value.String
			}
		case asset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case asset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case asset.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = value.Time
			}
		case asset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field song_asset", value)
			} else if value.Valid {
				a.song_asset = new(int)
				*a.song_asset = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySong queries the "song" edge of the Asset entity.
func (a *Asset) QuerySong() *SongQuery {
	return (&AssetClient{config: a.config}).QuerySong(a)
}

// Update returns a builder for updating this Asset.
// Note that you need to call Asset.Unwrap() before calling this method if this Asset
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Asset) Update() *AssetUpdateOne {
	return (&AssetClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Asset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Asset) Unwrap() *Asset {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Asset is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Asset) String() string {
	var builder strings.Builder
	builder.WriteString("Asset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("platform=")
	builder.WriteString(fmt.Sprintf("%v", a.Platform))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(a.Path)
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(a.Hash)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(a.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Assets is a parsable slice of Asset.
type Assets []*Asset

func (a Assets) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
