// Code generated by ent, DO NOT EDIT.

package asset

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the asset type in the database.
	Label = "asset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeSong holds the string denoting the song edge name in mutations.
	EdgeSong = "song"
	// Table holds the table name of the asset in the database.
	Table = "assets"
	// SongTable is the table that holds the song relation/edge.
	SongTable = "assets"
	// SongInverseTable is the table name for the Song entity.
	// It exists in this package in order to avoid circular dependency with the "song" package.
	SongInverseTable = "songs"
	// SongColumn is the table column denoting the song relation/edge.
	SongColumn = "song_asset"
)

// Columns holds all SQL columns for asset fields.
var Columns = []string{
	FieldID,
	FieldPlatform,
	FieldPath,
	FieldHash,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "assets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"song_asset",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
	// HashValidator is a validator for the "hash" field. It is called by the builders before save.
	HashValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Platform defines the type for the "platform" enum field.
type Platform string

// PlatformWINDOWS is the default value of the Platform enum.
const DefaultPlatform = PlatformWINDOWS

// Platform values.
const (
	PlatformWINDOWS Platform = "WINDOWS"
	PlatformIOS     Platform = "IOS"
)

func (pl Platform) String() string {
	return string(pl)
}

// PlatformValidator is a validator for the "platform" field enum values. It is called by the builders before save.
func PlatformValidator(pl Platform) error {
	switch pl {
	case PlatformWINDOWS, PlatformIOS:
		return nil
	default:
		return fmt.Errorf("asset: invalid enum value for platform field: %q", pl)
	}
}
